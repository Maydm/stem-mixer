Part 1

You've come a long way in your training already!
You've learned how to store and print variables, the different primitive types in 
Java and how operators and escape sequences work. You may not have realized it,
but you're now ready to write simple programs using basic mathematical operations!

So let's put your programmtic powers to use and build an automatic Fahrenheit to
Celsius converter. Now you'll never have to wonder how the rest of the world
measures the air temperature!


Let's think through a solution together.

The trick to solving big problems is to break them down into smaller problems,
or as I like to call them, puzzles. 

Sometimes it can help to write out the problem:

Problem to Solve: How can we write a program that will convert degrees Fahrenheit
to Celsius?

What's the formula?

The Formula to convert Fahrenheit to Celsius is T(c) = (T(f) - 32) * 5/9)

That's simple math. We know how to do that in Java!

We have a few variables and a copule of contansts. Let's start with the 
constants since they never change. 32 is easy. That'll always be 32.
5/9 is pretty straight forward to, but we'll need to instruct the computer to
make that calculation. So how can we do that? Weith our division operator.

In fact, we can establish a variable for 5/9 so we don't have to worry about
calculating it while figuring out all the other operations. So we'll save the
constant of (5/9) in a variable called `fiveNinths`.

Now for the variables. We'll have two variables, fahrenheit and celsius. 
We can name the variables as such to keep things simple and easy for other
programmers to understand.

We can begin to think about how to write the code 
now that we understand the formula and how to store the variables and constants.

We'll ask the user what the degrees Fahrenheit is in order to make the
conversion to Celsius so let's import and initiate our Scanner.

import java.util.Scanner;

public class FtoCeConverter {
    public static void main( String[] args ) {
    
        Scanner keyboard = new Scanner(System.in);
        
        /* Okay, we've initalized the Scanner and established our class.
           Now it's time to declare our variables. Keep in mind that 
           temperature is measures in decimals so think about what 
           type of variable you want to use. 
           
           We won't use int, long or byte because these don't support 
           decimals. 
           
           So we have two options. Do you remember what they are?
           
           If you thought "float" or "double" then you're correct. If you
           forgot then that's okay. Learning is a process and we're all
           on the journey towards growth. As long as you're growing then 
           you're succeeding.
           
           Normally we use double, but we now that degrees are measured 
           in tenths of degrees at the smallest (usually) so we can use
           float for this program. Just remember the special rule about 
           float variables! We need to include an "F" at the end of the 
           digits. That's just the way Java is.
           
           Try and write the necessary variables without looking
           at what I've provided.
        */
        
        float fahrenheit, celsius, fiveNinths = (5F/9F);
        
        /* Do your variables look something like this? I have probably
           done something that you haven't seen before.
           I've not only declared a variable, I've set a value to it in 
           the same line! Pretty cool huh? You can test to see if this 
           worked by printing the variable.
           
           System.out.println( "fiveNinths value is: " + fiveNinths );
           
           If you receive an output of `fiveNinths value is: 0.5555556`
           then you've confirmed that the variable is storing the 
           mathematical operation of 5/9.
           
           OK, now we need to ask the user for the degrees in fahrenheit.
           Do you remember how to do that? 
           It's ok if you forgot. Go ahead a look at your previous programs 
           to remind yourself and then come back to your converter code
           and type in the prompt and the command to save the input to the 
           variable.
        */

        System.out.print( "What is the temperature in fahrenheit? " );
        fahrenheit = keyboard.nextFloat();
        
        /* Great! Now our program will ask for a temperature in fahrenheit and
           store that value in the variable `fahrenheit`. We can provide any
           kind of messaging to the user as we like to, but the next important
           step is...can you guess it?
           
           ...Now that we have our variables in order...
           
           If you thought create the formula logic, you're exactly correct!
           You have the formula above. All we need to do is write it in a way
           that Java will understand. Try to do this on your own.
        */
        
        System.out.print( "The formula for converting fahrenheit to Celsius is " );
        System.out.println( "T(c) = (T(f) - 32) * 5/9" );
        
        celsius = ((fahrenheit - 32) * fiveNinths);
        
        /* Great, we are almost done. All that we need to do now is present
           the output (degrees Celsius) to the user. A println statement that
           displays the variable `celsius` should get the job done. Try doing
           this last bit without reading any further.
        */
                  
        System.out.println( "If the temperature in Fahreneheit is " + fahrenheit + " degrees ");
        System.out.println( "then the temperature as measured in Celsius is: " + celsius + " degrees." );
    }
}

Great work! Remember the closing curly braces and compile the program. 
Fix any bugs the complier may detect and let's see if it works!

For reference, 32F should return 0.0C, 100F should return 37.78C and -40 should
return -40, the only time when Fahrenheit and Celsius are exactly the same! 
BRRRR that's cold knowledge!


Part 2

That was fun! You're flexing your programming skills and becoming a smarter,
stronger, and more agile developer with every training exercise. 

Now that we've completed a Fahrenheit to Celsius converter, what do you 
suppose would make a good second exercise? I bet you already know! Yes!
A Celsius to Fahrenheit converter!

We walked through the Fahrenheit to Celsius converter together, but I'm 
going to let you work through this next exercise on your own. Don't worry,
I'll be waiting on the otherside, and I won't leave you without any tools. 

Remember, break a big problem down into small puzzles and write down your 
objective and necessary variables. 

Here's the formula you're looking for: T(f) = T(c) * 9/5 + 32

Once you've run the program you can double check these degrees to verify the 
accuracy of your program: 0C = 32F, 37C = 98.6F, and 100C = 212F.

Most importantly, have fun!

When you've created a conversion program that works as expected show your
instructor and then you can move on to the next exercise!


Part 3

Are you enjoying yourself? Let's work on another conversion program. This time
we'll convert feet to meters and meters to feet.

Let's start with the Feet to Meters conversion.

So first things first, let's state the problem:

How can we convert feet into meters?

State the formula:
1 ft = 0.3048 m

let d = distance

d(m) = d(ft) * 0.3048

Now that we know the formula, we can name the required variables.

meters, feet

What kind of variable types will you use?

0.3048 is a constant that will never change. We don't need a variable
for this for our program, but if we wanted to assign it to a variable 
we might name it something like `conversionRate`

OK. Now that we have clearly stated the problem and identified the 
variables needed we can begin to create our Java script. We'll need
the user's input so let's remember to import the Scanner utility and 
initalize it inside the main class.

When you think you have a properly running program you can test the answers.
1 ft = 0.3048 m, 5 ft = 1.5240 m, 9 ft = 2.7432 m.

Tips:

Did you name the class EXACTLY the same as the file name (without the .java)?
Did you declare a variable type that will store decimals?
If you choose to use float, did you append the letter "F" at the end of any
decimal numbers?
Did you remember to store the variable after the user input?
Did you close the curly braces?

Once you've successfully created a working program, congratulations! 

Now we can create a meter to foot conversion program.


Part 4

The meter to foot converter is going to be similar to our previous code. In 
fact, you could almost copy and past the majority of the program and be
ready to move forward with minor edits. However, we're trying to learn Java
and sometimes learning requires repition. Malcom Gladwell has researched that
it requires approximately 10,000 hours to become an expert at something. 
Fortunately, it won't take us 10,000 hours to learn Java, but we'll be able
to learn a bit faster if we type everything out ourselves.

As you may have guessed, the conversion for meters to feet requires division 
rather than multiplication.

Here's the formula: d(ft) = d(m) / 0.3048

Our conversion rate is the same, we only need to divide by meters rather
than multiply by feet. Give it a try!

__________________________________

Once you've completed Part 4 you are golden! Great Great work! 

Journal Entry
Take a moment to reflect upon your work in your journal. What have you learned
in this exercise?

How did you solve these coding challenges?

Did you use Google? How did you use it? Which search results were most helpful for you?
